{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "ename": "FileNotFoundError",
     "evalue": "[Errno 2] No such file or directory: 'score.txt'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-1-7b2e4a9911bb>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[1;32mwith\u001b[0m \u001b[0mopen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"score.txt\"\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;34m'r'\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;32mas\u001b[0m \u001b[0mf\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      2\u001b[0m     \u001b[0ms\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mf\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mreadlines\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      3\u001b[0m     \u001b[1;32mfor\u001b[0m \u001b[0mscore\u001b[0m \u001b[1;32min\u001b[0m \u001b[0ms\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      4\u001b[0m         \u001b[0mtotal\u001b[0m \u001b[1;33m+=\u001b[0m \u001b[0mint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mscore\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      5\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: 'score.txt'"
     ]
    }
   ],
   "source": [
    "#score 문제 답안\n",
    "\n",
    "total =0\n",
    "\n",
    "with open(\"score.txt\",'r') as f:\n",
    "    s = f.readlines()\n",
    "    for score in s:\n",
    "        total += int(score)\n",
    "\n",
    "with open(\"result.txt\",'w') as f:\n",
    "    f.write(\"총점=\"+str(total)+\"\\n\")\n",
    "    f.write(\"평균=\"+str(total/len(s))+\"\\n\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "#경로의 존재 확인하기.\n",
    "#os.path.exists(경로를 나타내는 문자열)\n",
    "#os 모듈의 서브 모듈 path에 들어있는  함수 exists를 호출하여 인자로 전달한 \n",
    "#경로가 존재하는지 검사한다.\n",
    "#Exist함수와 경로가 존재하면 True, 경로가 존재하지않으면 False리턴\n",
    "\n",
    "filepath='C:\\\\python\\\\test.txt'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "파일이 아닙니다\n"
     ]
    }
   ],
   "source": [
    "#os.path.isfile(경로를 나타내는 문자열)\n",
    "if os.path.isfile(filepath):\n",
    "    print(\"파일이 맞습니다\")\n",
    "else:\n",
    "    print(\"파일이 아닙니다\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "#디렉토리 확인\n",
    "#os.path.isdir(경로를 나타내는 문자열)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "#디렉토리에 있는 목록확인하기\n",
    "#os.listdir(파일목록을 확인할 디렉토리 이름.)\n",
    "\n",
    "#특정 디렉토리에 있는 파일 목록 확인\n",
    "#os.listdir(파일 목록을 확인할 디렉토리 이름.)\n",
    "\n",
    "# 파일의 경로 추출하기\n",
    "#os.path.dirname(경로를 나타내는 문자열) ->디렉토리 부분만 리턴\n",
    "#os.path.basename(경로를 나타내는 문자열)->파일 부분만 리턴\n",
    "#is.path.split(경로를 나타내는 문자열) ->디렉토리 부분과 파일 부분으로 분리하여 1개의 튜플로 리턴\n",
    "\n",
    "#os.path.splitext(경로) ->디렉토리부터 파일명까지 부분과 확장자 부분을 분리\n",
    "#os.path.join(경로) -> 디렉토리와 파일을 순서대로 결합한 경로를 1개의 문자열로 리턴"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('C:\\\\python\\\\test', '.txt')\n"
     ]
    }
   ],
   "source": [
    "#파일의 경로 추출하기\n",
    "my_path=os.path.splitext(filepath)\n",
    "print(my_path)\n",
    "#사실은 문자열을 잘라주는 것 밖에 되지 않는다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "C:\\MyProgram\\test.txt\n"
     ]
    }
   ],
   "source": [
    "root_dir_name=\"C:\\\\\"\n",
    "sub_dir_name=\"MyProgram\"\n",
    "file_name=\"test.txt\"\n",
    "\n",
    "filepath=os.path.join(root_dir_name,sub_dir_name,file_name)\n",
    "print(filepath)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "..\\..\\Windows\\System32\\notepad.exe\n"
     ]
    }
   ],
   "source": [
    "#파일의 상대경로 확인하기\n",
    "#os.path.relpath(파일 경로)\n",
    "filepath=\"C:\\\\Windows\\\\System32\\\\notepad.exe\"\n",
    "my_relpath=os.path.relpath(filepath)\n",
    "print(my_relpath)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "#파일의 절대경로 확인하기 \n",
    "#os.path.abspath(파일경로)\n",
    "#절대 경로는 고유한 전체주소를 의미한다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'test_backup.txt'"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#파일 복사하기\n",
    "\n",
    "#shutil.copy(복사할 원본파일, 복사될 파일 명)\n",
    "import shutil\n",
    "shutil.copy(\"test.txt\",\"test_backup.txt\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "#파일 이동하기\n",
    "#shutil.move(이동할 파일 ,이동되어 생성할 파일경로+이름)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "ename": "FileNotFoundError",
     "evalue": "[WinError 2] 지정된 파일을 찾을 수 없습니다: 'C:\\\\새 폴더\\\\abc.txt'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-17-1bf017126570>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mos\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mremove\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"C:\\\\새 폴더\\\\abc.txt\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;31mFileNotFoundError\u001b[0m: [WinError 2] 지정된 파일을 찾을 수 없습니다: 'C:\\\\새 폴더\\\\abc.txt'"
     ]
    }
   ],
   "source": [
    "os.remove(\"C:\\\\새 폴더\\\\abc.txt\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "ename": "FileNotFoundError",
     "evalue": "[Errno 2] No such file or directory: 'filename'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-18-5c6197d0d9fd>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[0mfilename\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;34m\"2012년_1당사자_법규위반별_주야별_교통사고.csv\"\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      2\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 3\u001b[1;33m \u001b[0mf\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mopen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"filename\"\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;34m\"r\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      4\u001b[0m \u001b[0mrd\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mcsv\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mreader\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mf\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      5\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: 'filename'"
     ]
    }
   ],
   "source": [
    "filename=\"2012년_1당사자_법규위반별_주야별_교통사고.csv\"\n",
    "\n",
    "f=open(\"filename\",\"r\")\n",
    "rd=csv.reader(f)\n",
    "\n",
    "for line in rd:\n",
    "    print(line)\n",
    "    \n",
    "f.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "ename": "FileNotFoundError",
     "evalue": "[Errno 2] No such file or directory: '2012년_1당사자_법규위반별_주야별_교통사고.csv'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-19-5a9adc0aac56>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[0;32m      4\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      5\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mcsv\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 6\u001b[1;33m \u001b[0mf\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mopen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mfilename\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;34m\"r\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      7\u001b[0m \u001b[0mrd\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mcsv\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mreader\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mf\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      8\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: '2012년_1당사자_법규위반별_주야별_교통사고.csv'"
     ]
    }
   ],
   "source": [
    "#읽어온 내용의 다음 레코드로 넘어가기\n",
    "#변수의 이름 =next(순회가능한 자료 객체)\n",
    "#next를 이용해서, csv파일의 헤더는 무시하고 실제 레코드만 출력/처리할 수 있다.\n",
    "\n",
    "import csv\n",
    "f=open(filename,\"r\")\n",
    "rd=csv.reader(f)\n",
    "\n",
    "next(rd)\n",
    "\n",
    "for line in rd:\n",
    "    print(line)\n",
    "f.close()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "처음 next가 리턴한 값: 1\n",
      "그 다음에 next가 리턴한 값: 2\n"
     ]
    }
   ],
   "source": [
    "mylist=[1,2,3]\n",
    "iter_list=iter(mylist)\n",
    "\n",
    "r=next(iter_list)\n",
    "print(\"처음 next가 리턴한 값:\",r)\n",
    "r=next(iter_list)\n",
    "print(\"그 다음에 next가 리턴한 값:\",r)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "#CSV파일에 내용쓰기\n",
    "#파일을 가리킬 변수 =OPEN(파일명,\"w',newline=\"\")\n",
    "import csv\n",
    "filename=\"test.csv\"\n",
    "f=open(filename,\"w\",newline=\"\")\n",
    "\n",
    "wt=csv.writer(f)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [],
   "source": [
    "#CSV 파일에 내용쓰기\n",
    "#쓰기 대상 변수.writerow(1개의 리스트)\n",
    "wt.writerow([1,2,3])\n",
    "wt.writerow([\"a\",\"b\",\"c\"])\n",
    "\n",
    "f.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "#쓰기 대상 변수.writerows(1개의 리스트)\n",
    "filename=\"test.csv\"\n",
    "\n",
    "with open(filename,\"w\",newline=\"\") as f:\n",
    "    wt=csv.writer(f)\n",
    "    wt.writerows([[1,2,3],[4,5,6]])\n",
    "    wt.writerows([[\"a\",\"b\"],[True,False]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "ename": "FileNotFoundError",
     "evalue": "[Errno 2] No such file or directory: 'data1.txt'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-29-367562fb29aa>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[0;32m      4\u001b[0m \u001b[0mfilename\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;34m\"data1.txt\"\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      5\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 6\u001b[1;33m \u001b[1;32mwith\u001b[0m \u001b[0mopen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mfilename\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;34m\"r\"\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mnewline\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;34m\"\"\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;32mas\u001b[0m \u001b[0mf\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      7\u001b[0m     \u001b[0mrd\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mcsv\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mreader\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mf\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mdelimiter\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;34m\" \"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      8\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: 'data1.txt'"
     ]
    }
   ],
   "source": [
    "#reader 및 writer 추가옵션\n",
    "#reader(대상파일,delimiter=\"구분자 문자열\")\n",
    "#writer(대상파일, delimiter=\"구분자 문자열\")\n",
    "filename=\"data1.txt\"\n",
    "\n",
    "with open(filename,\"r\",newline=\"\") as f:\n",
    "    rd=csv.reader(f,delimiter=\" \")\n",
    "    \n",
    "    for line in rd:\n",
    "        print(line)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [],
   "source": [
    "FILENAME=\"dat2.txt\"\n",
    "with open(filename,'w',newline='') as f:\n",
    "    wt=csv.writer(f,delimiter=\"\\t\")\n",
    "    \n",
    "    wt.writerow([1,2,3])\n",
    "    wt.writerow([\"a\",\"b\",\"c\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "ename": "ZeroDivisionError",
     "evalue": "division by zero",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mZeroDivisionError\u001b[0m                         Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-32-5ff91abb73e7>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[0;32m      6\u001b[0m \u001b[0ma\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m3\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      7\u001b[0m \u001b[0mb\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 8\u001b[1;33m \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0ma\u001b[0m\u001b[1;33m/\u001b[0m\u001b[0mb\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;31mZeroDivisionError\u001b[0m: division by zero"
     ]
    }
   ],
   "source": [
    "# 예외처리\n",
    "#예외 - 문법적으로 틀린부분이 없더라도, 실행도중 발생하게 되는 예상 밖의 상황\n",
    "\n",
    "# 예외가 발생하는 경우 \n",
    "# 수치를 0으로 나누려는 경우\n",
    "a=3\n",
    "b=0\n",
    "print(a/b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "ename": "FileNotFoundError",
     "evalue": "[Errno 2] No such file or directory: 'nofile.txt'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-33-1231172c5abb>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[0mfilename\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;34m\"nofile.txt\"\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 2\u001b[1;33m \u001b[0mf\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mopen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mfilename\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      3\u001b[0m \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mf\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: 'nofile.txt'"
     ]
    }
   ],
   "source": [
    "#예외 예제\n",
    "filename=\"nofile.txt\"\n",
    "f=open(filename)\n",
    "print(f)\n",
    "#예외 예제\n",
    "t=[1,2,3]\n",
    "print(t[3])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "ename": "IndentationError",
     "evalue": "expected an indented block (<ipython-input-34-86402fea02d7>, line 5)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  File \u001b[1;32m\"<ipython-input-34-86402fea02d7>\"\u001b[1;36m, line \u001b[1;32m5\u001b[0m\n\u001b[1;33m    except:\u001b[0m\n\u001b[1;37m         ^\u001b[0m\n\u001b[1;31mIndentationError\u001b[0m\u001b[1;31m:\u001b[0m expected an indented block\n"
     ]
    }
   ],
   "source": [
    "#에외 처리하기\n",
    "try:\n",
    "   # 예외가 발생하지 않을떄 수행할 구문\n",
    "    #...\n",
    "except:\n",
    "    #예외가 발생하면 수행할 구문\n",
    "#정상적인 상황에서 수행할 구문과 예외가 발생할 때 수행할 구문"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "무엇인가 잘못되었습니다.\n"
     ]
    }
   ],
   "source": [
    "#예제\n",
    "try:\n",
    "    f=open(filename)\n",
    "    while True:\n",
    "        s=f.readline()\n",
    "        if not s:\n",
    "            break\n",
    "        print(s)\n",
    "        \n",
    "    f.close()\n",
    "except:\n",
    "    print(\"무엇인가 잘못되었습니다.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "문제를 해결하지 못했습니다.\n"
     ]
    }
   ],
   "source": [
    "# 예외처리를 중첩할 수 있으나, except 블록내에서는 일반적인\n",
    "# 수행구문들이 구조적으로 존재하는 것은 권장되지 않는다.\n",
    "\n",
    "a=1\n",
    "b=2\n",
    "\n",
    "try:\n",
    "    print(a+b+c)\n",
    "except:\n",
    "    try:\n",
    "        if c is None:\n",
    "            c=0\n",
    "        print(c)\n",
    "    except:\n",
    "        print(\"문제를 해결하지 못했습니다.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "ename": "IndentationError",
     "evalue": "unexpected indent (<ipython-input-37-f9e4c7e2a254>, line 3)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  File \u001b[1;32m\"<ipython-input-37-f9e4c7e2a254>\"\u001b[1;36m, line \u001b[1;32m3\u001b[0m\n\u001b[1;33m    예외가 발생하지 않을 때 수행할 구문\u001b[0m\n\u001b[1;37m    ^\u001b[0m\n\u001b[1;31mIndentationError\u001b[0m\u001b[1;31m:\u001b[0m unexpected indent\n"
     ]
    }
   ],
   "source": [
    "#예외처리 하기\n",
    "#    try:\n",
    "#        예외가 발생하지 않을 때 수행할 구문\n",
    "#    except 예외 이름:\n",
    "#        예외 종류 1이 발생하면 수행할 구문\n",
    "#    except 예외 이름:\n",
    "#        예외 종류2가 발생하면 수행 구문"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "파일이 존재하지 않는 예외가 발생했습니다.\n"
     ]
    }
   ],
   "source": [
    "try:\n",
    "    f=open(\"nofile.txt\")\n",
    "    f.close()\n",
    "    \n",
    "    print(1+2+c)\n",
    "    print([1,2,3][3])\n",
    "except IndexError:\n",
    "    print(\"인덱스 관련 예외가 발생했습니다\")\n",
    "except FileNotFoundError:\n",
    "    print(\"파일이 존재하지 않는 예외가 발생했습니다.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "ename": "IndentationError",
     "evalue": "expected an indented block (<ipython-input-41-0e98c8bd6edb>, line 5)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  File \u001b[1;32m\"<ipython-input-41-0e98c8bd6edb>\"\u001b[1;36m, line \u001b[1;32m5\u001b[0m\n\u001b[1;33m    except IndexError:\u001b[0m\n\u001b[1;37m         ^\u001b[0m\n\u001b[1;31mIndentationError\u001b[0m\u001b[1;31m:\u001b[0m expected an indented block\n"
     ]
    }
   ],
   "source": [
    "#예외처리하기\n",
    "\n",
    "try:\n",
    "\n",
    "except IndexError:\n",
    "    print(\"인덱스 관련 예외가 발생했습니다.\")\n",
    "except FileNotFoundError:\n",
    "    print(\"파일이 존재하지 않는 예외가 발생했습니다.\")\n",
    "except Exception:\n",
    "    Print(\"개별적으로 처리한 예외 이외에 예외가 발생했습니다.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[Errno 2] No such file or directory: 'tset.txt'\n"
     ]
    }
   ],
   "source": [
    "try:\n",
    "    f=open(\"tset.txt\")\n",
    "    f.close()\n",
    "    \n",
    "    print(1+2+c)\n",
    "    print([1,2,3][3])\n",
    "except IndexError as e1:\n",
    "    print(e1)\n",
    "except FileNotFoundError as e2:\n",
    "    print(e2)\n",
    "except Exception as e:\n",
    "    print(e)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6\n",
      "1\n",
      "예외 발생없이 try 블록이 모두 수행되었습니다.\n"
     ]
    }
   ],
   "source": [
    "#예외 처리 추가 구문 else\n",
    "try:\n",
    "    f=open(\"test.txt\")\n",
    "    f.close()\n",
    "    \n",
    "    print(1+2+3)\n",
    "    print([1,2,3][0])\n",
    "except Exception as e:\n",
    "    print(e)\n",
    "else:\n",
    "    print(\"예외 발생없이 try 블록이 모두 수행되었습니다.\")\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[Errno 2] No such file or directory: 'nofile.txt'\n",
      "예외 여부와 무관하게 이 블록은 항상 실행됩니다.\n"
     ]
    }
   ],
   "source": [
    "#예외 처리 추가 구문 finally\n",
    "\n",
    "try:\n",
    "    f=open(\"nofile.txt\")\n",
    "    f.close()\n",
    "    \n",
    "    print(1+2+3)\n",
    "    print([1,2,3][0])\n",
    "except Exception as e:\n",
    "    print(e)\n",
    "finally:\n",
    "    print(\"예외 여부와 무관하게 이 블록은 항상 실행됩니다.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "정수를 입력하세요:python\n",
      "정수로 변환할 수 ㅇ벗는 값니다.\n",
      "invalid literal for int() with base 10: 'python'\n"
     ]
    }
   ],
   "source": [
    "#예외처리 예\n",
    "try:\n",
    "    v=int(input(\"정수를 입력하세요:\"))\n",
    "    if v>0:\n",
    "        print(\"양수입니다.\")\n",
    "    if v<0:\n",
    "        print(\"음수입니다.\")\n",
    "    else:\n",
    "        print(\"0입니다.\")\n",
    "except ValueError as ve:\n",
    "    print(\"정수로 변환할 수 ㅇ벗는 값니다.\")\n",
    "    print(ve)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "division by zero\n"
     ]
    }
   ],
   "source": [
    "# 예외 처리\n",
    "def func1(a,b):\n",
    "    return a/b\n",
    "\n",
    "def func2(c):\n",
    "    return c[-1]\n",
    "\n",
    "try:\n",
    "    r1=func1(5,0)\n",
    "    r2=func2({1,2,3})\n",
    "except Exception as e:\n",
    "    print(e)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "#리스트가 1순위\n",
    "# 제어문 for if while 이 2순위\n",
    "#함수는 그리 안 중요."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[111, 2, [333, 4], 5]\n",
      "[111, 2, [333, 4], 5]\n"
     ]
    }
   ],
   "source": [
    "#마지막 정말 중요한 문제\n",
    "a=[1,2,[3,4],5]\n",
    "b=a\n",
    "#결국 b=a 라서, b를 바꾸면 a도 같이 바뀐다.\n",
    "#a=[1,2,[3,4],5]\n",
    "#b[1,2,[3,4],5] 이렇게 할당해라! 근데 할수 있겠냐? 다음 라인 참조\n",
    "b[0]=111\n",
    "b[2][0]=333\n",
    "\n",
    "print(a)\n",
    "print(b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 2, [333, 4], 5]\n",
      "[111, 2, [333, 4], 5]\n"
     ]
    }
   ],
   "source": [
    "a=[1,2,[3,4],5]\n",
    "b=list(a)\n",
    "b[0]=111\n",
    "b[2][0]=333\n",
    "\n",
    "print(a)\n",
    "print(b)\n",
    "\n",
    "#즉 a와 똑같은 애가 아니라서, 이런 식으로해야한다! 그런데 b[2][0]에서 리스트를 333으로 바꿔서 a도 같이 바꼈다.\n",
    "#리스트 안에 리스트 있는게 아주 위험한 자료다..\n",
    "#리스트로 백업을 뜨는건 안전하지않다. 일부를 공유하는 것이기 때문."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 2, [333, 4], 5]\n",
      "[111, 2, [333, 4], 5]\n"
     ]
    }
   ],
   "source": [
    "a=[1,2,[3,4],5]\n",
    "b=a[:] #list(a) #copy.copy(a) 얘네들은 결국 항목이 list면 복사하는게 아니고 바라보게만 한다.\n",
    "b[0]=111\n",
    "b[2][0]=333\n",
    "print(a)\n",
    "print(b)\n",
    "#슬라이싱을 하는데 항목자체가 리스트임. 이 경우도 리스트를 복사하는게 아니고 리스트를 바라보게하는거야!!!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 2, [333, 4], 5]\n",
      "[111, 2, [333, 4], 5]\n"
     ]
    }
   ],
   "source": [
    "\n",
    "import copy\n",
    "\n",
    "a=[1,2,[3,4],5]\n",
    "b=copy.copy(a)\n",
    "\n",
    "b[0]=111\n",
    "b[2][0]=333\n",
    "\n",
    "print(a)\n",
    "print(b)\n",
    "#결국 다 똑같은데 어떻게 해결할까? 바로 Deepcopy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 2, [3, 4], 5]\n",
      "[111, 2, [333, 4], 5]\n"
     ]
    }
   ],
   "source": [
    "#즉, deepcopy\n",
    "import copy\n",
    "\n",
    "a=[1,2,[3,4],5]\n",
    "b=copy.deepcopy(a) #원천적으로 복제하겠다는 뜻이므로 얘로 해야 리스트인 항목까지 복사한다.\n",
    "\n",
    "b[0]=111\n",
    "b[2][0]=333\n",
    "\n",
    "print(a)\n",
    "print(b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
